#!/usr/bin/env python3
'''
Plausible Deniabity Toolkit

Create specific hidden volume defined in the configuration file.

Example:

    pdt_create_volume config-dir volume-name [remote-hostname]

Where `config-dir` is a directory containing `config.json` file

Copyright 2018-2022 amateur80lvl
License: BSD, see LICENSE for details.
'''

import os
import sys

from pdt_base import read_config, Invoke

config_dir = sys.argv[1]
volume_name = sys.argv[2]
remote = sys.argv[3] if len(sys.argv) > 3 else None

# XXX automate this check:
input('Make sure /mnt is a tmpfs volume! Press ENTER if yes: ')

config = read_config(config_dir)
invoke = Invoke(remote=remote)
invoke.set_devices(config)

df_result = invoke.run('df').stdout

opened_volumes = []
mounted_volumes = []
try:
    if volume_name == 'ALL':
        volumes = list(config['volumes'].keys())
    else:
        volumes = [volume_name]

    for volume_name in volumes:
        volume_config = config['volumes'][volume_name]

        if not invoke.path_exists(volume_config['mount_point']):
            invoke.run(f'mkdir -p {volume_config["mount_point"]}')
        if invoke.is_encrypted_volume_active(volume_name):
            print(f'Skipping already opened {volume_name}')
            continue

        print(f'Opening {volume_name}')
        loop_device, volume_device = invoke.locrypt_open(volume_name, volume_config)
        opened_volumes.append((loop_device, volume_name))
        if invoke.is_formatted(volume_device):
            print(f'Skipping already formatted {volume_device}')
        else:
            print(f'Formatting {volume_device}')
            invoke.run(f'mkfs -t ext4 -m 0 -E nodiscard {volume_device}')
        if volume_device in df_result:
            print(f'Skipping already mounted {volume_device}')
        else:
            print(f'Mounting {volume_device}')
            invoke.run(f'mount {volume_device} {volume_config["mount_point"]}')
            mounted_volumes.append(volume_config['mount_point'])
except:
    for mount_point in mounted_volumes:
        invoke.run(f'umount {mount_point}')
    for loop_device, volume_name in opened_volumes:
        invoke.locrypt_close(loop_device, volume_name)
    raise
